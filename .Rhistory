test_data = insuranceData[test_ids,]
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
# using stepwise regression to get the most suitable model
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
# Gender is not significant, droping gender field
modified_forward_model = lm(premium ~ age + bmi + num_kids + smoking_status + district, data = train_data)
summary(modified_forward_model)
# cretaing a model with log value of the premium
min_model_preimum_log = lm(premium_log ~ 1, data = train_data)
premium_log_model = step(min_model_preimum_log, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_log_model)
# removing outliers for bmi
bmi_outliers = boxplot(train_data$bmi)$out
train_data_without_bmi_outliers = train_data[-which(train_data$bmi %in% bmi_outliers),]
train_data_without_bmi_outliers
min_model_bmi_outlier_free = lm(premium ~ 1, data = train_data_without_bmi_outliers)
bmi_outlier_free_model = step(min_model_bmi_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(bmi_outlier_free_model)
# removing outliers for premium
premium_outlers = boxplot(train_data_without_bmi_outliers$premium)$out
train_data_without_premium_outliers = train_data_without_bmi_outliers[-which(train_data_without_bmi_outliers$premium %in% premium_outlers),]
train_data_without_premium_outliers
min_model_premium_outlier_free = lm(premium ~ 1, data = train_data_without_premium_outliers)
premium_outlier_free_model = step(min_model_premium_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_outlier_free_model)
summary(bmi_outlier_free_model)
summary(premium_outlier_free_model)
summary(bmi_outlier_free_model)
summary(bmi_outlier_free_model)
summary(bmi_outlier_free_model)
summary(premium_outlier_free_model)
summary(premium_outlier_free_model)
# importing libraries
library(ggplot2)
# imporing the cvs file
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceData = read.csv("insuranceData.csv", header = TRUE)
head(insuranceData)
# adding log value fields
insuranceData$premium_log = log(insuranceData$premium)
# Finding the suitable model
row_count = nrow(insuranceData)
# Spliting the data to train and test sets
set.seed(100)
train_ids = sample(1:row_count, row_count * 0.7, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
train_data = insuranceData[train_ids,]
test_data = insuranceData[test_ids,]
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
# using stepwise regression to get the most suitable model
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
# Gender is not significant, droping gender field
modified_forward_model = lm(premium ~ age + bmi + num_kids + smoking_status + district, data = train_data)
summary(modified_forward_model)
# cretaing a model with log value of the premium
min_model_preimum_log = lm(premium_log ~ 1, data = train_data)
premium_log_model = step(min_model_preimum_log, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_log_model)
# removing outliers for bmi
bmi_outliers = boxplot(train_data$bmi)$out
train_data_without_bmi_outliers = train_data[-which(train_data$bmi %in% bmi_outliers),]
train_data_without_bmi_outliers
min_model_bmi_outlier_free = lm(premium ~ 1, data = train_data_without_bmi_outliers)
bmi_outlier_free_model = step(min_model_bmi_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(bmi_outlier_free_model)
# removing outliers for premium
premium_outlers = boxplot(train_data_without_bmi_outliers$premium)$out
train_data_without_premium_outliers = train_data_without_bmi_outliers[-which(train_data_without_bmi_outliers$premium %in% premium_outlers),]
train_data_without_premium_outliers
min_model_premium_outlier_free = lm(premium ~ 1, data = train_data_without_premium_outliers)
premium_outlier_free_model = step(min_model_premium_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_outlier_free_model)
# removing outliers for premium
premium_outliers = boxplot(train_data_without_bmi_outliers$premium)$out
train_data_without_premium_outliers = train_data_without_bmi_outliers[-which(train_data_without_bmi_outliers$premium %in% premium_outliers),]
train_data_without_premium_outliers
min_model_premium_outlier_free = lm(premium ~ 1, data = train_data_without_premium_outliers)
premium_outlier_free_model = step(min_model_premium_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_outlier_free_model)
# coding the bmi variable
insuranceData[insuranceData$bmi <= 18.5]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9 ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi < 29.9]$bmi_class = "obese_weight"
# importing libraries
library(ggplot2)
# imporing the cvs file
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceData = read.csv("insuranceData.csv", header = TRUE)
head(insuranceData)
# Overall summery of the dataset
summary(insuranceData)
# coding the bmi variable
insuranceData[insuranceData$bmi <= 18.5]$bmi_class = "under_weight"
# coding the bmi variable
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
# coding the bmi variable
insuranceData[,insuranceData$bmi <= 18.5]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi <= 18.5,]
insuranceData[insuranceData$bmi <= 18.5,]$bim_class
insuranceData[insuranceData$bmi <= 18.5,]$bim
insuranceData[insuranceData$bmi <= 18.5,]
insuranceData[insuranceData$bmi <= 18.5,]$bmi
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "ded"
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class
insuranceData[insuranceData$bmi <= 18.5,]
insuranceData[insuranceData$bmi <= 18.5,]$bmi
insuranceData[insuranceData$bmi <= 18.5,]$bmi = 0
insuranceData[insuranceData$bmi <= 18.5,]$bmi
insuranceData[insuranceData$bmi <= 18.5,]$bmi_1 = 1
insuranceData$abc = 0
insuranceData$abc
insuranceData[insuranceData$bmi <= 18.5,]$abc
insuranceData[insuranceData$bmi <= 18.5,]$abc = 1
library(ggplot2)
# imporing the cvs file
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceData = read.csv("insuranceData.csv", header = TRUE)
head(insuranceData)
# adding log value fields
insuranceData$premium_log = log(insuranceData$premium)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi < 29.9,]$bmi_class = "obese_weight"
head(insuranceData)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
head(insuranceData)
# importing libraries
library(ggplot2)
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceData = read.csv("insuranceData.csv", header = TRUE)
head(insuranceData)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
head(insuranceData)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
head(insuranceData)
nrow(insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,])
nrow(insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,])
# coding the bmi variable
insuranceData$bmi_class = ""
head(insuranceData)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
head(insuranceData)
tail(insuranceData)
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[(insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9),]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
tail(insuranceData)
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[( (insuranceData$bmi > 24.9) && (insuranceData$bmi <= 29.9) ),]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
tail(insuranceData)
insuranceData[insuranceData$bmi_class == "healthy_weight"]
insuranceData[insuranceData$bmi_class == "healthy_weight",]
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
tail(insuranceData)
#head(SLPopulation)
my_function(insuranceDataDup, "")
get_mode = function(dataSet){
uniqueItems <- unique(dataSet)
uniqueItems[which.max(tabulate(match(dataSet, uniqueItems)))]
}
my_function = function(dataSet, parameter){
# Iterating through each column
for(column_name in colnames(dataSet)){
if(column_name == "X1"){
next
}
data_column = dataSet[[column_name]]
# Calculating number of missing values for the current column
no_of_missing_values = sum(is.na(data_column))
# Checking for quantitative variables
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
cat("Number of missing values", no_of_missing_values, "\n")
if(no_of_missing_values > 0){
# Calculating the mean in order to replace missing values
mean_value = mean(data_column, na.rm = TRUE)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mean_value
}
outLiers =  boxplot(dataSet[[column_name]], ylab = column_name, main = paste("BoxPlot for ", column_name))$out
hist(dataSet[[column_name]], main=paste("Histogram of ",column_name), xlab = column_name)
cat("Outliers", outLiers, "\n\n\n")
}
# Qualititative variables
else{
cat(column_name," is qualititative \n")
cat("Number of missing values", no_of_missing_values, "\n\n\n")
if(no_of_missing_values > 0){
# Calculating mode inorder to replace missing values
mode_value = get_mode(data_column)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mode_value
}
}
}
head(dataSet)
lm(premium ~., data = dataSet)
}
#head(SLPopulation)
my_function(insuranceDataDup, "")
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceDataDup = read.csv("insuranceDataDup.csv", header = TRUE)
#head(SLPopulation)
my_function(insuranceDataDup, "")
get_mode = function(dataSet){
uniqueItems <- unique(dataSet)
uniqueItems[which.max(tabulate(match(dataSet, uniqueItems)))]
}
my_function = function(dataSet, parameter){
# Iterating through each column
for(column_name in colnames(dataSet)){
if(column_name == "X1"){
next
}
data_column = dataSet[[column_name]]
# Calculating number of missing values for the current column
no_of_missing_values = sum(is.na(data_column))
# Checking for quantitative variables
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
cat("Number of missing values", no_of_missing_values, "\n")
if(no_of_missing_values > 0){
# Calculating the mean in order to replace missing values
mean_value = mean(data_column, na.rm = TRUE)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mean_value
}
outLiers =  boxplot(dataSet[[column_name]], ylab = column_name, main = paste("BoxPlot for ", column_name))$out
hist(dataSet[[column_name]], main=paste("Histogram of ",column_name), xlab = column_name)
cat("Outliers", outLiers, "\n\n\n")
}
# Qualititative variables
else{
cat(column_name," is qualititative \n")
cat("Number of missing values", no_of_missing_values, "\n\n\n")
if(no_of_missing_values > 0){
# Calculating mode inorder to replace missing values
mode_value = get_mode(data_column)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mode_value
}
}
}
my_model= lm(premium ~., data = dataSet)
summary(my_model)
}
#head(SLPopulation)
my_function(insuranceDataDup, "")
get_mode = function(dataSet){
uniqueItems <- unique(dataSet)
uniqueItems[which.max(tabulate(match(dataSet, uniqueItems)))]
}
my_function = function(dataSet, parameter){
# Iterating through each column
for(column_name in colnames(dataSet)){
if(column_name == "X1"){
next
}
data_column = dataSet[[column_name]]
# Calculating number of missing values for the current column
no_of_missing_values = sum(is.na(data_column))
# Checking for quantitative variables
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
cat("Number of missing values", no_of_missing_values, "\n")
if(no_of_missing_values > 0){
# Calculating the mean in order to replace missing values
mean_value = mean(data_column, na.rm = TRUE)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mean_value
}
outLiers =  boxplot(dataSet[[column_name]], ylab = column_name, main = paste("BoxPlot for ", column_name))$out
hist(dataSet[[column_name]], main=paste("Histogram of ",column_name), xlab = column_name)
cat("Outliers", outLiers, "\n\n\n")
}
# Qualititative variables
else{
cat(column_name," is qualititative \n")
cat("Number of missing values", no_of_missing_values, "\n\n\n")
if(no_of_missing_values > 0){
# Calculating mode inorder to replace missing values
mode_value = get_mode(data_column)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mode_value
}
}
}
min_model = lm(premium ~ 1, data = dataSet)
my_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(my_model)
}
#head(SLPopulation)
my_function(insuranceDataDup, "")
#head(SLPopulation)
my_function(insuranceDataDup, "")
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 && insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 && insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
tail(insuranceData)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 & insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 & insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
tail(insuranceData)
# importing libraries
library(ggplot2)
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceData = read.csv("insuranceData.csv", header = TRUE)
head(insuranceData)
# Overall summery of the dataset
summary(insuranceData)
# summery of the variable
summary(insuranceData$age)
# adding log value fields
insuranceData$premium_log = log(insuranceData$premium)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 & insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 & insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
tail(insuranceData)
# Finding the suitable model
row_count = nrow(insuranceData)
# Spliting the data to train and test sets
set.seed(100)
train_ids = sample(1:row_count, row_count * 0.7, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
train_data = insuranceData[train_ids,]
test_data = insuranceData[test_ids,]
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
# using stepwise regression to get the most suitable model
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
# Gender is not significant, droping gender field
modified_forward_model = lm(premium ~ age + bmi + num_kids + smoking_status + district, data = train_data)
summary(modified_forward_model)
# cretaing a model with log value of the premium
min_model_preimum_log = lm(premium_log ~ 1, data = train_data)
premium_log_model = step(min_model_preimum_log, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_log_model)
# removing outliers for bmi
bmi_outliers = boxplot(train_data$bmi)$out
train_data_without_bmi_outliers = train_data[-which(train_data$bmi %in% bmi_outliers),]
train_data_without_bmi_outliers
min_model_bmi_outlier_free = lm(premium ~ 1, data = train_data_without_bmi_outliers)
bmi_outlier_free_model = step(min_model_bmi_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(bmi_outlier_free_model)
# removing outliers for premium
premium_outliers = boxplot(train_data_without_bmi_outliers$premium)$out
train_data_without_premium_outliers = train_data_without_bmi_outliers[-which(train_data_without_bmi_outliers$premium %in% premium_outliers),]
train_data_without_premium_outliers
min_model_premium_outlier_free = lm(premium ~ 1, data = train_data_without_premium_outliers)
premium_outlier_free_model = step(min_model_premium_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_outlier_free_model)
# Taking the bmi as a categorical field
min_model_bmi_as_category = lm(premium ~ 1, data = train_data_without_bmi_outliers)
# Taking the bmi as a categorical field
min_model_bmi_as_category = lm(premium ~ 1, data = train_data_without_bmi_outliers)
bmi_as_category_model = step(min_model_bmi_as_category, direction = "forward", scope = (~age + gender + bmi_class + num_kids + smoking_status + district))
summary(bmi_as_category_model)
summary(bmi_as_category_model)
bmi_as_category_model = step(min_model_bmi_as_category, direction = "forward", scope = (~age + gender + bmi_class + num_kids + smoking_status + district))
# Finding the suitable model
row_count = nrow(insuranceData)
# Spliting the data to train and test sets
set.seed(100)
train_ids = sample(1:row_count, row_count * 0.7, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
train_data = insuranceData[train_ids,]
test_data = insuranceData[test_ids,]
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
# using stepwise regression to get the most suitable model
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
# using stepwise regression to get the most suitable model
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
# Gender is not significant, droping gender field
modified_forward_model = lm(premium ~ age + bmi + num_kids + smoking_status + district, data = train_data)
# AIC=17904.41
# R-squared:  0.7418
levels(insuranceData$district)
# coding num_kids variable
insuranceData$has_kids = FALSE
insuranceData[insuranceData$num_kids > 0]$has_kids = TRUE
tail(insuranceData)
# coding num_kids variable
insuranceData$has_kids = FALSE
insuranceData[insuranceData$num_kids > 0]$has_kids = TRUE
head(insuranceData)
tail(insuranceData)
# coding num_kids variable
insuranceData$has_kids = FALSE
insuranceData[insuranceData$num_kids > 0,]$has_kids = TRUE
head(insuranceData)
tail(insuranceData)
library(ggplot2)
# imporing the cvs file
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceData = read.csv("insuranceData.csv", header = TRUE)
head(insuranceData)
# Overall summery of the dataset
summary(insuranceData)
# adding log value fields
insuranceData$premium_log = log(insuranceData$premium)
# coding the bmi variable
insuranceData$bmi_class = ""
insuranceData[insuranceData$bmi <= 18.5,]$bmi_class = "under_weight"
insuranceData[insuranceData$bmi > 18.5 & insuranceData$bmi <= 24.9, ]$bmi_class = "healthy_weight"
insuranceData[insuranceData$bmi > 24.9 & insuranceData$bmi <= 29.9,]$bmi_class = "over_weight"
insuranceData[insuranceData$bmi > 29.9,]$bmi_class = "obese_weight"
# coding num_kids variable
insuranceData$has_kids = FALSE
insuranceData[insuranceData$num_kids > 0,]$has_kids = TRUE
head(insuranceData)
tail(insuranceData)
# Finding the suitable model
row_count = nrow(insuranceData)
# Spliting the data to train and test sets
set.seed(100)
train_ids = sample(1:row_count, row_count * 0.7, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
train_data = insuranceData[train_ids,]
test_data = insuranceData[test_ids,]
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
# using stepwise regression to get the most suitable model
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
# Gender is not significant, droping gender field
modified_forward_model = lm(premium ~ age + bmi + num_kids + smoking_status + district, data = train_data)
summary(modified_forward_model)
# cretaing a model with log value of the premium
min_model_preimum_log = lm(premium_log ~ 1, data = train_data)
premium_log_model = step(min_model_preimum_log, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_log_model)
# removing outliers for bmi
bmi_outliers = boxplot(train_data$bmi)$out
train_data_without_bmi_outliers = train_data[-which(train_data$bmi %in% bmi_outliers),]
train_data_without_bmi_outliers
min_model_bmi_outlier_free = lm(premium ~ 1, data = train_data_without_bmi_outliers)
bmi_outlier_free_model = step(min_model_bmi_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(bmi_outlier_free_model)
# removing outliers for premium
premium_outliers = boxplot(train_data_without_bmi_outliers$premium)$out
train_data_without_premium_outliers = train_data_without_bmi_outliers[-which(train_data_without_bmi_outliers$premium %in% premium_outliers),]
train_data_without_premium_outliers
min_model_premium_outlier_free = lm(premium ~ 1, data = train_data_without_premium_outliers)
premium_outlier_free_model = step(min_model_premium_outlier_free, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(premium_outlier_free_model)
# Taking the bmi as a categorical field
min_model_bmi_as_category = lm(premium ~ 1, data = train_data_without_bmi_outliers)
bmi_as_category_model = step(min_model_bmi_as_category, direction = "forward", scope = (~age + gender + bmi_class + num_kids + smoking_status + district))
summary(bmi_as_category_model)
# AIC=17904.41
# R-squared:  0.7418
levels(insuranceData$district)
# Taking number of kids as a categorical variable
min_model_num_kids_as_category = lm(premium ~ 1, data = train_data_without_bmi_outliers)
num_kids_as_category_model = step(min_model_num_kids_as_category, direction = "forward", scope = (~age + gender + bmi + has_kids + smoking_status + district))
summary(num_kids_as_category_model)
# Taking number of kids as a categorical variable
min_model_num_kids_as_category = lm(premium ~ 1, data = train_data_without_bmi_outliers)
num_kids_as_category_model = step(min_model_num_kids_as_category, direction = "forward", scope = (~age + gender + bmi + has_kids + smoking_status + district))
summary(num_kids_as_category_model)
# Taking number of kids as a categorical variable
min_model_num_kids_as_category = lm(premium ~ 1, data = train_data_without_bmi_outliers)
num_kids_as_category_model = step(min_model_num_kids_as_category, direction = "forward", scope = (~age + gender + bmi + has_kids + smoking_status + district))
summary(num_kids_as_category_model)
summary(num_kids_as_category_model)
summary(num_kids_as_category_model)
summary(num_kids_as_category_model)
summary(num_kids_as_category_model)
num_kids_as_category_model = step(min_model_num_kids_as_category, direction = "forward", scope = (~age + gender + bmi + has_kids + smoking_status + district))
summary(num_kids_as_category_model)
