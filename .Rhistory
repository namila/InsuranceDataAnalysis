data_column = dataSet[[column_name]]
no_of_missing_values = sum(is.na(data_column))
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
if(no_of_missing_values > 0){
mode_value = mode(data_column)
cat("mode value ", mode_value, "\n")
}
} else{
cat(column_name," is qualititative \n")
if(no_of_missing_values > 0){
mean_value = mean(data_column)
cat("mean value ", mean_value, "\n")
}
}
cat("Number of missing values", no_of_missing_values, "\n")
}
}
my_function(SLPopulation, "")
head(SLPopulation)
my_function = function(dataSet, parameter){
for(column_name in colnames(dataSet)){
data_column = dataSet[[column_name]]
no_of_missing_values = sum(is.na(data_column))
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
if(no_of_missing_values > 0){
mean_value = mean(data_column)
cat("mean value ", mean_value, "\n")
}
} else{
cat(column_name," is qualititative \n")
if(no_of_missing_values > 0){
mode_value = mode(data_column)
cat("mode value ", mode_value, "\n")
}
}
cat("Number of missing values", no_of_missing_values, "\n")
}
}
head(SLPopulation)
my_function(SLPopulation, "")
??mean()
my_function = function(dataSet, parameter){
for(column_name in colnames(dataSet)){
data_column = dataSet[[column_name]]
no_of_missing_values = sum(is.na(data_column))
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
if(no_of_missing_values > 0){
mean_value = mean(data_column, na.rm = TRUE)
cat("mean value ", mean_value, "\n")
}
} else{
cat(column_name," is qualititative \n")
if(no_of_missing_values > 0){
mode_value = mode(data_column)
cat("mode value ", mode_value, "\n")
}
}
cat("Number of missing values", no_of_missing_values, "\n")
}
}
head(SLPopulation)
my_function(SLPopulation, "")
my_function = function(dataSet, parameter){
for(column_name in colnames(dataSet)){
data_column = dataSet[[column_name]]
no_of_missing_values = sum(is.na(data_column))
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
if(no_of_missing_values > 0){
mean_value = mean(data_column, na.rm = TRUE)
data_column[is.na(data_column)] = mean_value
}
} else{
cat(column_name," is qualititative \n")
if(no_of_missing_values > 0){
mode_value = mode(data_column)
data_column[is.na(data_column)] = mode_value
}
}
cat("Number of missing values", no_of_missing_values, "\n")
}
}
my_function(SLPopulation, "")
my_function = function(dataSet, parameter){
for(column_name in colnames(dataSet)){
data_column = dataSet[[column_name]]
no_of_missing_values = sum(is.na(data_column))
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
if(no_of_missing_values > 0){
mean_value = mean(data_column, na.rm = TRUE)
data_column[is.na(data_column)] = mean_value
}
} else{
cat(column_name," is qualititative \n")
if(no_of_missing_values > 0){
mode_value = mode(data_column)
data_column[is.na(data_column)] = mode_value
}
}
cat("Number of missing values", no_of_missing_values, "\n")
}
head(dataSet)
}
head(SLPopulation)
my_function(SLPopulation, "")
head(SLPopulation)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
View(insuranceData)
View(insuranceData)
View(SLPopulation)
View(insuranceData)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
View(insuranceData)
insuranceDataDup <- read.csv("~/Documents/Msc/DataAnalysis/CourseWork/insuranceDataDup.csv")
View(insuranceDataDup)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
View(insuranceDataDup)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
View(insuranceDataDup)
View(insuranceDataDup)
View(SLPopulation)
View(insuranceData)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(SLPopulation)
View(SLPopulation)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceData)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceDataDup)
View(insuranceData)
View(SLPopulation)
View(insuranceData)
library(readr)
insuranceDataDup <- read_csv("Documents/Msc/DataAnalysis/CourseWork/insuranceDataDup.csv")
View(insuranceDataDup)
my_function = function(dataSet, parameter){
for(column_name in colnames(dataSet)){
data_column = dataSet[[column_name]]
no_of_missing_values = sum(is.na(data_column))
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
if(no_of_missing_values > 0){
mean_value = mean(data_column, na.rm = TRUE)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mean_value
cat("column mean", mean_value)
}
} else{
cat(column_name," is qualititative \n")
if(no_of_missing_values > 0){
mode_value = mode(data_column)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mode_value
}
}
cat("Number of missing values", no_of_missing_values, "\n")
}
head(dataSet)
}
#head(SLPopulation)
my_function(insuranceDataDup, "")
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
View(insuranceDataDup)
mode(insuranceDataDup$district)
get_mode = function(dataSet){
uniqueItems <- unique(dataSet)
uniqueItems[which.max(tabulate(match(dataSet, uniqueItems)))]
}
my_function = function(dataSet, parameter){
for(column_name in colnames(dataSet)){
data_column = dataSet[[column_name]]
no_of_missing_values = sum(is.na(data_column))
if(is.numeric(data_column) == TRUE){
cat(column_name," is quantitative \n")
if(no_of_missing_values > 0){
mean_value = mean(data_column, na.rm = TRUE)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mean_value
}
} else{
cat(column_name," is qualititative \n")
if(no_of_missing_values > 0){
mode_value = get_mode(data_column)
cat("Mode value ", mode_value)
dataSet[[column_name]][is.na(dataSet[[column_name]])] =  mode_value
}
}
cat("Number of missing values", no_of_missing_values, "\n")
}
head(dataSet)
}
#head(SLPopulation)
my_function(insuranceDataDup, "")
View(insuranceDataDup)
print(tabulate(c(2,3,5)))
print(tabulate(c(2,3,5,5)))
print(tabulate(c(2,3,4,5,5)))
print(tabulate(c(2,3,4,4,5,5)))
print(tabulate(c(2,3,4,4,4,5,5)))
print(tabulate(c(2,3,4,4,4,4,5,5)))
print(tabulate(c(2,3,4,4,4,4,5,5,10)))
match(1, c(0,1,2,3,4,5,6))
match(1, c(0,1,2,30,4,5,6))
match(30, c(0,1,2,30,4,5,6))
match(c(0,1), c(0,1,2,30,4,5,6))
match(c(0,1,30), c(0,1,2,30,4,5,6))
match(c(0,1,30,6), c(0,1,2,30,4,5,6))
unique(c(0,1,2,3,4))
unique(c(0,1,2,3,4,2,2))
unique(c(0,1,2,3,4,2,2,4))
unique(c(0,1,2,3,4,2,2,4,5))
unique(c(0,1,2,3,4,2,2,4,5,5))
unique(c(0,1,2,3,4,2,2,4,5,5,5))
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
match(c(0,1,30,6), c(0,1,2,30,4,5,6))
unique(c(0,1,2,3,4,2,2,4,5,5,5))
match(c(0,1,30,6), c(0,1,2,30,4,5,6))
match(c(0,1,30,6,6,6), c(0,1,2,30,4,5,6))
match(c(0,1,30,6,6,6,6,6,6), c(0,1,2,30,4,5,6))
which.max(1,2,3)
which.max(c(1,2,3))
which.max(c(1,20,3))
which.max(c(1,20,300))
which.max(c(1,20,300,670))
which.max(c(100000,20,300,670))
print(tabulate(c(2,3,4,4,4,4,5,5,10)))
print(tabulate(c(20,20,21,22,23,24,24,24,25)))
print(tabulate(c(201,201,211,221,231,241,241,241,251)))
print(tabulate(c(1,201,201,211,221,231,241,241,241,251)))
print(tabulate(c(0,1,201,201,211,221,231,241,241,241,251)))
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
View(insuranceDataDup)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
source('~/Documents/Msc/DataAnalysis/CourseWork/custom_function.R', echo=TRUE)
# importing libraries
library(ggplot2)
# imporing the cvs file
setwd("/Users/namilap/Documents/Msc/DataAnalysis/CourseWork")
insuranceData = read.csv("insuranceData.csv", header = TRUE)
head(insuranceData)
# Overall summery of the dataset
summary(insuranceData)
# Analyzing age
# summery of the variable
summary(insuranceData$age)
# Finding the suitable model
row_count = nrow(insuranceData)
row_count
# Finding the suitable model
row_count = nrow(insuranceData)
row_count
sample(1:row_count, n * 0.7, replace = TRUE)
sample( 1:row_count, row_count * 0.7, replace = TRUE)
?sample()
train_ids = sample(1:row_count, n * 0.7, replace = TRUE)
train_ids = sample(1:row_count, n * 0.7, replace = TRUE)
test_ids = c(1:row_count) - train_ids
train_ids
train_ids = sample(1:row_count, n * 0.7, replace = TRUE)
# Finding the suitable model
row_count = nrow(insuranceData)
row_count
train_ids = sample(1:row_count, row_count * 0.7, replace = TRUE)
test_ids = c(1:row_count) - train_ids
c(1:row_count)
train_ids
class(c(1:row_count))
class(integer)
class(train_ids)
c(1:row_count) - train_ids
c(1:10)
c(1:3)
c(1:10) - c(1:3)
val = c(1:10) - c(1:3)
val
1:10
# Finding the suitable model
row_count = nrow(insuranceData)
row_count
train_ids = sample(1:row_count, row_count * 0.7, replace = TRUE)
test_ids = 1:row_count - train_ids
1:row_count - [1,2]
1:row_count - [1:2]
(1:row_count) - [1:2]
(1:row_count) - (1:2)
(1:10) - (1:2)
1 : 5
setdiff(1:10, 2:3)
setdiff(1:2, 2:3)
setdiff(1:4, 2:3)
# Finding the suitable model
row_count = nrow(insuranceData)
row_count
train_ids = sample(1:row_count, row_count * 0.7, replace = TRUE)
test_ids = setdiff(1:row_count, train_ids)
length(test_ids) + length(train_ids)
row_count
length(test_ids) + length(train_ids)
# Finding the suitable model
ins = 1:20
row_count = nrow(ins)
row_count
# Finding the suitable model
ins = 1:20
row_count = length(ins)
row_count
train_ids = sample(1:row_count, row_count * 0.8, replace = TRUE)
test_ids = setdiff(1:row_count, train_ids)
train_ids
test_ids
length(train_ids) + length(test_ids)
length(train_ids)
length(test_ids)
train_ids = sample(1:row_count, row_count * 0.8, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
length(train_ids) + length(test_ids)
train_ids
test_ids
# Finding the suitable model
row_count = length(insuranceData)
row_count
# Finding the suitable model
row_count = nrow(insuranceData)
row_count
train_ids = sample(1:row_count, row_count * 0.8, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
length(train_ids) + length(test_ids)
head(test_ids)
head(train_ids)
length(test_ids)
length(train_ids)
# Finding the suitable model
row_count = nrow(insuranceData)
row_count
train_ids = sample(1:row_count, row_count * 0.7, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
length(train_ids)
length(test_ids)
train_ids = sample(1:row_count, row_count * 0.7, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
test_data = insuranceData[test_ids,]
train_data = insuranceData[train_ids,]
head(test_data)
head(train_data)
# Spliting the data to train and test sets
row_count = nrow(insuranceData)
train_ids = sample(1:row_count, row_count * 0.7, replace = FALSE)
test_ids = setdiff(1:row_count, train_ids)
train_data = insuranceData[train_ids,]
test_data = insuranceData[test_ids,]
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
names(insuranceData)
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status))
summary(forward_model)
insuranceData$district
as.factor(insuranceData$district)
as.factor(insuranceData$district)
insuranceData$district
factor(insuranceData$district)
a= factor(insuranceData$district)
# Spliting the data to train and test sets
a
is.factor(insuranceData$district)
min_model = lm(premium ~ 1, data = train_data)
min_model = lm(premium ~ 1, data = train_data)
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status))
summary(forward_model)
min_model = lm(premium ~ 1, data = train_data)
summary(min_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ ,*))
modified_forward_model = step(min_model, direction = "forward", scope = (~ *))
modified_forward_model = step(min_model, direction = "forward", scope = (~ * -bmi))
modified_forward_model = step(min_model, direction = "forward", scope = (~  -bmi))
modified_forward_model = step(min_model, direction = "forward", scope = (~.))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ .))
modified_forward_model = step(min_model, direction = "forward", scope = (~ *))
modified_forward_model = step(min_model, direction = "forward", scope = (.))
modified_forward_model = step(min_model, direction = "forward", scope = (~ . -bmi))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ .))
summary(modified_forward_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ . -districtgalle))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ age + gender + bmi + num_kids + smoking_status + district - districtgalle))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ .))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ .))
summary(modified_forward_model)
?step()
modified_forward_model = step(min_model, direction = "forward", scope = (~ .^2))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ names(insuranceData)))
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district - districtgalle))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district - district:galle))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ ., train_data))
modified_forward_model = step(min_model, direction = "forward", scope = (~ . train_data))
modified_forward_model = step(min_model, direction = "forward", scope = (~ .), train_data)
modified_forward_model = step(min_model, direction = "forward", scope = (~ .train_data))
modified_forward_model = step(min_model, direction = "forward", scope = (~))
modified_forward_model = step(min_model, direction = "forward", scope = (~ .))
summary(modified_forward_model)
modified_forward_model = step(min_model, direction = "forward", scope = (~ .,data = train_data))
modified_forward_model = step(min_model, direction = "forward", scope = (~ .), data = train_data)
summary(modified_forward_model)
modified_forward_model = lm(premium ~ .)
modified_forward_model = lm(premium ~ ., data = train_data)
summary(modified_forward_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
modified_forward_model = lm(premium ~ . -districtgalle, data = train_data)
summary(modified_forward_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
modified_forward_model = lm(premium ~ district - districtgalle, data = train_data)
modified_forward_model = lm(premium ~ district - district:galle, data = train_data)
modified_forward_model = lm(premium ~ ., data = train_data)
summary(modified_forward_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
contrasts(train_data$gender)
contrasts(train_data$district)
dummy_cols()
insuranceData$coded_gender =  factor(insuranceData$gender,levels = levels(insuranceData$gender),labels = 1:length(levels(insuranceData$gender)))
Head(insuranceData$coded_gender )
head(insuranceData$coded_gender)
insuranceData$coded_gender =  factor(insuranceData$gender,levels = levels(insuranceData$gender),labels = 0:length(levels(insuranceData$gender)))
insuranceData$coded_gender =  factor(insuranceData$gender,levels = levels(insuranceData$gender),labels = 1:length(levels(insuranceData$gender)))
head(insuranceData$coded_gender)
head(insuranceData$gender)
head(insuranceData)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
modified_forward_model = lm(premium ~ . -gender, data = train_data)
summary(modified_forward_model)
forward_model = step(min_model, direction = "forward", scope = (~age + gender + bmi + num_kids + smoking_status + district))
summary(forward_model)
modified_forward_model = lm(premium ~ age + bmi + num_kids + smoking_status + district, data = train_data)
summary(modified_forward_model)
